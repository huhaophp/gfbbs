// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package users

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table users.
type Entity struct {
    Id          uint        `orm:"id,primary"    json:"id"`            //                
    Name        string      `orm:"name"          json:"name"`          //                
    Email       string      `orm:"email"         json:"email"`         //                
    Gender      int         `orm:"gender"        json:"gender"`        //                
    Avatar      string      `orm:"avatar"        json:"avatar"`        //                
    Password    string      `orm:"password"      json:"password"`      //                
    Status      int         `orm:"status"        json:"status"`        //                
    LastLoginIp string      `orm:"last_login_ip" json:"last_login_ip"` //                
    Sign        string      `orm:"sign"          json:"sign"`          //                
    Site        string      `orm:"site"          json:"site"`          //                
    RegisterAt  *gtime.Time `orm:"register_at"   json:"register_at"`   //                
    PostsNum    int         `orm:"posts_num"     json:"posts_num"`     // 发帖子统计     
    CommentsNum int         `orm:"comments_num"  json:"comments_num"`  // 评论/回复统计  
    CreateAt    *gtime.Time `orm:"create_at"     json:"create_at"`     //                
    UpdateAt    *gtime.Time `orm:"update_at"     json:"update_at"`     //                
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}